// --- Global Assumptions for Plan Health Modeling ---
const ASSUMED_GROWTH_RATE = 7.0 / 100;      // 7.0% assumed average annual return
const ASSUMED_INFLATION = 3.0 / 100;         // 3.0% assumed inflation
const TARGET_REPLACEMENT_RATE = 0.75;      // Goal: 75% of pre-retirement income needed
const SAFE_WITHDRAWAL_RATE = 4.0 / 100;     // 4% rule for annual retirement income
const MAX_RETIREMENT_AGE = 75;              // Maximum age the calculation will check

// Helper functions (reused from Tool 2, adapted for aggregate data)
function formatCurrency(value) {
   return new Intl.NumberFormat('en-US', {
       style: 'currency',
       currency: 'USD',
       minimumFractionDigits: 0
   }).format(value);
}

function formatPercentage(value) {
   return (value).toFixed(1) + '%';
}


// =========================================================================
// PLAN HEALTH SNAPSHOT LOGIC
// =========================================================================

function generateSnapshot() {
   const currentAge = parseFloat(document.getElementById('avgAge').value);
   const currentSalary = parseFloat(document.getElementById('avgSalary').value);
   const currentBalance = parseFloat(document.getElementById('avgBalance').value);
   const totalContributionRate = parseFloat(document.getElementById('avgRate').value) / 100; // Convert to decimal
   
   const resultsDiv = document.getElementById('snapshotResults');
   const errorMessage = document.getElementById('error-message');
   
   // Clear previous state
   resultsDiv.innerHTML = '';
   errorMessage.style.display = 'none';

   // 1. Validation
   if (isNaN(currentAge) || currentAge < 20 || isNaN(currentSalary) || currentSalary < 1000 || isNaN(currentBalance) || currentBalance < 0 || isNaN(totalContributionRate) || totalContributionRate < 0) {
       errorMessage.textContent = 'Please enter valid numbers for all aggregate inputs.';
       errorMessage.style.display = 'block';
       return;
   }
   
   // --- Key Variables ---
   const yearsTo65 = 65 - currentAge;
   const annualContribution = currentSalary * totalContributionRate;

   // 2. Projected Future Value at Age 65 (Simplified Compounding Formula)
   let futureValue = currentBalance;
   
   // A. Future Value of Current Balance
   futureValue = currentBalance * Math.pow(1 + ASSUMED_GROWTH_RATE, yearsTo65);
   
   // B. Future Value of Contributions (Future Value of an Annuity)
   // Formula: P * [((1 + r)^n - 1) / r]
   const fvaFactor = (Math.pow(1 + ASSUMED_GROWTH_RATE, yearsTo65) - 1) / ASSUMED_GROWTH_RATE;
   const fvaContributions = annualContribution * fvaFactor;
   
   const totalProjectedBalance65 = futureValue + fvaContributions;


   // 3. Target Income and Retirement Gap Calculations

   // A. Target Income (Inflation-Adjusted)
   const inflatedSalary65 = currentSalary * Math.pow(1 + ASSUMED_INFLATION, yearsTo65);
   const targetIncome65 = inflatedSalary65 * TARGET_REPLACEMENT_RATE;

   // B. Income Generated by Projected Balance
   const generatedIncome65 = totalProjectedBalance65 * SAFE_WITHDRAWAL_RATE;
   
   // C. Income Replacement Rate (IRR)
   const projectedIRR = (generatedIncome65 / targetIncome65) * TARGET_REPLACEMENT_RATE;
   // We adjust the projected IRR down by the target rate (75%) so it's a percentage of the total required income.
   // Example: If generated is $50k and target is $75k, IRR is 66.7% of the target.
   const finalIRRPercent = (generatedIncome65 / targetIncome65) * 100;
   
   // D. Retirement Age Check (Find the age where IRR hits 100% of the target)
   let projectedRetirementAge = 65;
   
   if (finalIRRPercent < 100) {
       // If they don't hit the target by 65, iterate to find the age where they do (up to MAX_RETIREMENT_AGE)
       for (let age = 66; age <= MAX_RETIREMENT_AGE; age++) {
           const years = age - currentAge;
           
           // Recalculate future balance for this new age
           const fvBalance = currentBalance * Math.pow(1 + ASSUMED_GROWTH_RATE, years);
           const fvContributions = annualContribution * ((Math.pow(1 + ASSUMED_GROWTH_RATE, years) - 1) / ASSUMED_GROWTH_RATE);
           const totalFV = fvBalance + fvContributions;
           
           // Recalculate target income for this new age
           const inflatedSalary = currentSalary * Math.pow(1 + ASSUMED_INFLATION, years);
           const target = inflatedSalary * TARGET_REPLACEMENT_RATE;
           const generated = totalFV * SAFE_WITHDRAWAL_RATE;
           
           if (generated >= target) {
               projectedRetirementAge = age;
               break;
           }
           projectedRetirementAge = MAX_RETIREMENT_AGE; // Default to max age if target is not met
       }
   } else {
       // If they already hit 100% before 65 (unlikely, but possible), they are ready now
       projectedRetirementAge = currentAge;
   }


   // 4. Determine Status & Action Tip
   let statusClass;
   let actionTip;

   if (finalIRRPercent >= 90) {
       statusClass = 'high-readiness';
       actionTip = 'The average participant is on track for a healthy retirement. Focus on maximizing participation among the remaining non-savers.';
   } else if (finalIRRPercent >= 75) {
       statusClass = 'medium-readiness';
       actionTip = 'The plan shows moderate readiness. To improve, encourage auto-increase, match the maximum match, or boost financial education.';
   } else {
       statusClass = 'low-readiness';
       actionTip = 'The average participant is at significant risk. Consider auto-enrollment, increasing the default deferral rate, or raising the employer match immediately.';
   }

   // 5. Display Results
   resultsDiv.innerHTML = `
       <div class="metric-row">
           <span class="metric-label">Projected Final 401(k) Balance (Age 65)</span>
           <span class="metric-value">${formatCurrency(totalProjectedBalance65)}</span>
       </div>
       <div class="metric-row">
           <span class="metric-label">Target Annual Retirement Income (Age 65)</span>
           <span class="metric-value">${formatCurrency(targetIncome65)}</span>
       </div>
       <div class="metric-row" style="border-bottom: none;">
           <span class="metric-label">Income Generated Annually (4% Rule)</span>
           <span class="metric-value">${formatCurrency(generatedIncome65)}</span>
       </div>
       
       <div style="margin-top: 30px;">
           <div class="metric-row" style="border-top: 2px solid #ccc; padding-top: 15px;">
               <span class="metric-label">Projected Income Replacement Rate (IRR)</span>
               <span class="metric-value ${statusClass}">${formatPercentage(finalIRRPercent)}</span>
           </div>
           <div class="metric-row" style="border-bottom: 2px solid #ccc;">
               <span class="metric-label">Projected Full Retirement Age (100% Target)</span>
               <span class="metric-value ${statusClass}">${projectedRetirementAge}</span>
           </div>
       </div>

       <div class="action-tip">
           <p style="font-weight: bold;">Strategic Action:</p>
           <p>${actionTip}</p>
       </div>
       
       <p class="hint-text" style="text-align: center; margin-top: 20px;">
           *Assumes ${formatPercentage(ASSUMED_GROWTH_RATE * 100)}% return, ${formatPercentage(ASSUMED_INFLATION * 100)}% inflation, and a ${formatPercentage(TARGET_REPLACEMENT_RATE * 100)}% income replacement target.
       </p>
   `;

   // 6. Auto-Scroll to Results
   const resultsElement = document.getElementById('results');
   resultsElement.scrollIntoView({ behavior: 'smooth', block: 'start' });
}